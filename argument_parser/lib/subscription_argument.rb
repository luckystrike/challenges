# Autogenerated from a Treetop grammar. Edits may be lost.


module SubscriptionArgument
  include Treetop::Runtime

  def root
    @root ||= :parenthesized_args
  end

  module ParenthesizedArgs0
    def args
      elements[1]
    end

  end

  def _nt_parenthesized_args
    start_index = index
    if node_cache[:parenthesized_args].has_key?(index)
      cached = node_cache[:parenthesized_args][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('{', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('{')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_args
      s0 << r2
      if r2
        if has_terminal?('}', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('}')
          r3 = nil
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ParenthesizedArgs0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:parenthesized_args][start_index] = r0

    r0
  end

  module Args0
    def arg
      elements[1]
    end
  end

  module Args1
    def first_arg
      elements[0]
    end

    def rest_args
      elements[1]
    end
  end

  module Args2
    def args
      [first_arg] + rest_args.elements.map do |comma_and_arg|
      	comma_and_arg.arg
      end
    end
  end

  def _nt_args
    start_index = index
    if node_cache[:args].has_key?(index)
      cached = node_cache[:args][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_escaped_arg
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        if has_terminal?(', ', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure(', ')
          r4 = nil
        end
        s3 << r4
        if r4
          r5 = _nt_escaped_arg
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(Args0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Args1)
      r0.extend(Args2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:args][start_index] = r0

    r0
  end

  module EscapedArg0
  end

  def _nt_escaped_arg
    start_index = index
    if node_cache[:escaped_arg].has_key?(index)
      cached = node_cache[:escaped_arg][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      i1 = index
      if has_terminal?('|,', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('|,')
        r2 = nil
      end
      if r2
        r1 = r2
      else
        if has_terminal?('|{', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure('|{')
          r3 = nil
        end
        if r3
          r1 = r3
        else
          if has_terminal?('|}', false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure('|}')
            r4 = nil
          end
          if r4
            r1 = r4
          else
            i5, s5 = index, []
            i6 = index
            if has_terminal?(',', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(',')
              r7 = nil
            end
            if r7
              r6 = nil
            else
              @index = i6
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s5 << r6
            if r6
              i8 = index
              if has_terminal?('{', false, index)
                r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure('{')
                r9 = nil
              end
              if r9
                r8 = nil
              else
                @index = i8
                r8 = instantiate_node(SyntaxNode,input, index...index)
              end
              s5 << r8
              if r8
                i10 = index
                if has_terminal?('}', false, index)
                  r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure('}')
                  r11 = nil
                end
                if r11
                  r10 = nil
                else
                  @index = i10
                  r10 = instantiate_node(SyntaxNode,input, index...index)
                end
                s5 << r10
                if r10
                  if index < input_length
                    r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure("any character")
                    r12 = nil
                  end
                  s5 << r12
                end
              end
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(EscapedArg0)
            else
              @index = i5
              r5 = nil
            end
            if r5
              r1 = r5
            else
              @index = i1
              r1 = nil
            end
          end
        end
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:escaped_arg][start_index] = r0

    r0
  end

end

class SubscriptionArgumentParser < Treetop::Runtime::CompiledParser
  include SubscriptionArgument
end

